*filter
:INPUT ACCEPT [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
{% if fw_config.dockerhost is defined and fw_config.dockerhost %}
:DOCKER - [0:0]
:DOCKER-ISOLATION-STAGE-1 - [0:0]
:DOCKER-ISOLATION-STAGE-2 - [0:0]
:DOCKER-USER - [0:0]
{%- endif -%}
-F
# Hardcoded INPUT rules
-A INPUT -i lo -m comment --comment "accept all to lo interface" -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -m comment --comment "accept related and established" -j ACCEPT

{% for rule in fw_config.rules|sort(attribute="comment") %}
{% if rule.proto is defined and rule.proto == "any" %}{% set proto = 'all' %}
{% elif rule.proto is undefined %}{% set proto = 'tcp' %}
{% else %}{% set proto = rule.proto %}{% endif -%}

{% if rule.direction is undefined or rule.direction == "in" %}
-A INPUT{% if rule.nic is defined %} -i {{ rule.nic }}{% endif %}
{% if rule.src_ip is defined %} -s {{ rule.src_ip }}{% if not '/' in rule.src_ip %}/32{% endif %}{% endif %}
{% if rule.dst_ip is defined %} -d {{ rule.dst_ip }} {% endif %}
 -p {{ proto -}}
{% if rule.dst_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --dports {% else %} --dport {% endif %}{{ rule.dst_port }}
{%- endif -%}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
{% if rule.policy is defined and rule.policy == "deny" %} -j DROP {% else %} -j ACCEPT{% endif %}

{% elif rule.direction == "out" %}
-A OUTPUT{% if rule.nic is defined %} -i {{ rule.nic }}{% endif %}
{% if rule.src_ip is defined %} -s {{ rule.src_ip }}{% if not '/' in rule.src_ip %}/32{% endif %}{% endif %}
{% if rule.dst_ip is defined %} -d {{ rule.dst_ip }} {% endif %}
 -p {{ proto -}}
{% if rule.src_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --sports {% else %} --sport {% endif %}{{ rule.src_port }}
{%- endif -%}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
{% if rule.policy is defined and rule.policy == "deny" %} -j DROP {% else %} -j ACCEPT{% endif %}

{% elif rule.direction == "forward" %}
-A FORWARD{% if rule.nic is defined %} -i {{ rule.nic }}{% endif %}
{% if rule.src_ip is defined %} -s {{ rule.src_ip }}{% if not '/' in rule.src_ip %}/32{% endif %}{% endif %}
{% if rule.dst_ip is defined %} -d {{ rule.dst_ip }} {% endif %}
 -p {{ proto -}}
{% if rule.dst_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --dports {% else %} --dport {% endif %}{{ rule.dst_port }}
{%- endif -%}
{% if rule.src_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --sports {% else %} --sport {% endif %}{{ rule.src_port }}
{%- endif -%}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
{% if rule.policy is defined and rule.policy == "deny" %} -j DROP {% else %} -j ACCEPT{% endif %}

{% else %}
{% if rule.policy is defined and rule.policy == "deny" %}-A {% else %}-I {% endif %}
{{ rule.direction }}{% if rule.nic is defined %} -i {{ rule.nic }}{% endif %}
{% if rule.src_ip is defined %} -s {{ rule.src_ip }}{% endif %}
{% if rule.src_set is defined %} -m set --match-set {{ rule.src_set }} src{% endif %}
{% if rule.dst_set is defined %} -m set --match-set {{ rule.dst_set }} dst{% endif %}
{% if rule.dst_ip is defined %} -d {{ rule.dst_ip }} {% endif %}
 -p {{ proto -}}
{% if rule.dst_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --dports {% else %} --dport {% endif %}{{ rule.dst_port }}
{%- endif -%}
{% if rule.src_port is defined -%}
{% if proto == "tcp" or proto == "udp" %} -m multiport --sports {% else %} --sport {% endif %}{{ rule.src_port }}
{%- endif -%}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
{% if rule.policy is defined and rule.policy == "deny" -%} -j DROP
{% elif rule.policy is defined and rule.policy != "allow" -%} -j {{ rule.policy }}
{% else -%} -j ACCEPT{% endif %}

{% endif %}
{% endfor %}

{% if fw_config.dockerhost is defined and fw_config.dockerhost %}
-I DOCKER-USER -m conntrack --ctstate ESTABLISHED,RELATED -j RETURN
{% endif %}

{% if firewall_nat is defined %}{% if firewall_nat.snat_enabled %}
{# Allow SNAT traffic, DNAT needs it's own forward rules #}
# Forward traffic through {{firewall_nat.wan_nic}} (SNAT)
-A FORWARD -s {{firewall_nat.lan_subnet}} -o {{firewall_nat.wan_nic}} -j ACCEPT -m comment --comment "Outgoing SNAT traffic"
-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT -m comment --comment "accept related and established"

{% endif %}{% endif %}


{% if fw_config.policy is undefined or fw_config.policy == "deny" %}
{% if fw_config.log is undefined or fw_config.log %}
-A INPUT -j LOG --log-prefix "iptables:INPUT:DROP "
{% endif %}
-A INPUT -j DROP

{% if fw_config.log %}
-A FORWARD -j LOG --log-prefix "iptables:FORWARD:DROP "
{% endif %}
-A FORWARD -j DROP
{% endif %}

{% if fw_config.output_policy is defined and fw_config.output_policy == "deny" %}
{% if fw_config.log is undefined or fw_config.log %}
-A OUTPUT -j LOG --log-prefix "iptables:OUTPUT:DROP "
{% endif %}
-A OUTPUT -j DROP
{% endif %}

COMMIT
